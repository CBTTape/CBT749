//GILBERTN JOB (ACCT#),NOTCTLG3,
//*RESTART=EXECPROC.FROM,
// NOTIFY=GILBERT,
// CLASS=A,MSGCLASS=X
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)
***********************************************************************
*                                                                     *
*        REPLACEMENT FOR CZX3PSRC                              OS/VS2 *
*                                                                     *
*        1.  PREVENTS "NOT CATLG 2" CONDITIONS                        *
*                                                                     *
*        WARNING: The detection of NOT CATLG 2 situations only        *
*        occurs when the program's own STEP name is "FROM".           *
*                                                                     *
***********************************************************************
         LCLC  &STR
NOTCTLG3 CSECT
         SAVE  (14,12),,'GSF UTILITIES - NOTCTLG3 R202'
         BALR  R11,0
         USING *,R11
         L     R2,0(,R1)               PARM FROM JCL
         GETMAIN R,LV=DYNL             ALLOCATE DYNAMIC STORAGE
         ST    R13,4(,R1)              SAVE SAVE AREA ADDRESS
         LR    R13,R1                  NEW SAVE AREA
         USING DYN,R13
*
*        PROCESS PARM (GET RETURN CODE VALUE IN BINARY)
*
         LH    R15,0(,R2)              PARM LENGTH
         BCTR  R15,0
         PACK  RETCODE,2(*-*,R2)       RETURN CODE
         EX    R15,*-6                 EXECUTE PACK INSTRUCTION
         CVB   R10,RETCODE             GET RETCODE, CHECK FOR A S0C7
*
         L     R1,540(,0)              MY TCB (PSATOLD-PSA)
         L     R4,TCBJSCB-TCB(,R1)     MY JSCB
         USING IEZJSCB,R4
         L     R5,JSCBJCT              GET JCT ADDRESS
         USING JCT,R5
         L     R6,JSCSCT               CURRENT STEP'S SCT PREFIX
         USING SCT,R6
**       CLC   =C'FROM ',SCTSCLPC      PROCSTEP
**       BE    LOOPSCT
         CLC   =C'FROM ',SCTSNAME      STEP=FROM?
         BNE   RETURN                  IT'S NOT THE RIGHT STEP, I QUIT
*LOOP
LOOPSCT  CLC   SCTSDPSA,JSCSCT+1       COND MUST REFER TO MY STEP
         BNE   NEXTSTEP                IT'S NOT THE CASE, TRY NEXT STEP
         CH    R10,SCTSDPCD            COND=(54,LT,FROM)
         BH    NEXTSTEP                STEP TO BE BYPASSED
         ICM   R1,B'0111',SCTFSIOT     PREFIX OF 1ST SIOT
         BZ    NEXTSTEP                NO MORE DDS, TRY NEXT SCT
*--LOOP
LOOPSIOT EQU   *
         LA    R7,16(,R1)              PASS SIOT ADDRESS
         USING SIOT,R7
         ICM   R1,B'0111',SCTPJFCB     JFCB PREFIX
         LA    R8,16(,R1)              PASS JFCB ADDRESS
         USING JFCB,R8                 DSNAME FROM JFCB
         MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE
*
         TM    SCTSDISP,2              DISP=(,CATLG) ?
         BNO   NEXTSIOT                JUMP, DISP IS NOT CATLG
         TM    SCTSBYT3,4              DISP=NEW
         BO    DISPOK                  JUMP IF DISP=NEW
         TM    SCTSBYT3,2              DISP=MOD
         BNO   NEXTSIOT                EXIT IF NOT NEW OR MOD
DISPOK   TM    JFCBIND1,JFCGDG         CHECK FOR (+1)
         BO    NEXTSIOT                JUMP, THIS IS A GDG
         LOCATE CAML26
         LTR   R15,R15
         BNZ   NEXTSIOT                DATA SET NOT CATALOGED
         CLI   MSG2DSN,C' '            CHECK DSNAME
         BNE   NOTFIRST                NOT FIRST ERROR, JUMP
         WTO   MF=(E,BLANKLNE)         BLANK LINE
         WTO   MF=(E,BLANKLNE)         BLANK LINE
NOTFIRST MVC   MSG2STEP,SCTSNAME       STEPNAME
         MVC   MSG2DDN,SCTDDNAM        DDNAME
         MVC   MSG2DSN,JFCBDSNM        DSNAME
         WTO   MF=(E,MSG2)             ISSUE "ALREADY CATALOGED" MSG
*
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     NEXT SIOT'S PREFIX
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP
*--ENDLOOP
         DROP  R7,R8                   WERE SIOT, JFCB
NEXTSTEP ICM   R6,B'0111',SCTANSCT     NEXT SCT PREFIX
         BNZ   LOOPSCT                 PROCESS NEXT STEP
*ENDLOOP
ENDSCT   CLI   MSG2DSN,C' '            CHECK FOR AN ERROR
         BE    RETURN                  NO ERRORS, RETURN.
         WTO   MF=(E,BLANKLNE)         BLANK LINE
         WTO   MF=(E,BLANKLNE)         BLANK LINE
*
*        IF THE STEP IS AUTHORIZED, SET THE "JOB FAILED" BIT ON
*        IN THE JCT.  IF THE STEP ISN'T AUTHORIZED, ISSUE AN ABEND.
*        THE ADVANTAGE OF A "JOB FAILED" IS THAT COND=EVEN STEPS
*        ARE NOT EXECUTED.
*
         TM    JSCBOPTS,JSCBAUTH       TEST AUTHORIZATION
         BZ    ABEND88                 JUMP IF NOT AUTHORIZED.
         MODESET KEY=ZERO              CHANGE TO KEY 0
         OI    JCTJSTAT,INCMSTS        TURN ON "JOB FAILED" BIT
*
RETURN   LR    R1,R13                  PASS ADDR FOR FREEMAIN
         L     R13,4(,R13)
         FREEMAIN R,LV=DYNL,A=(1)      FREE DYNAMIC STORAGE
         LR    R15,R10                 RETURN CODE FROM PARM
         RETURN (14,12),RC=(15)
ABEND88  ABEND 2088                    AT LEAST 1 CATALOGED DATA SET
*---------------------------------------------------------------------*
*                                                                     *
*        WORK AREAS FOR NOT-CATLG 2 FUNCTION                          *
*                                                                     *
*---------------------------------------------------------------------*
BLANKLNE WTO   '****',ROUTCDE=14,MF=L  BLANK LINE FOR READABILITY
&STR     SETC  (44)' '
MSG2     WTO   '**** ALREADY CATALOGED: SSSSSSSS DDDDDDDD &STR',       X
               ROUTCDE=(11,14),MF=L
MSG2STEP EQU   MSG2+28+00,8            STEPNAME
MSG2DDN  EQU   MSG2+28+09,8            DDNAME
MSG2DSN  EQU   MSG2+28+18,44           DSNAME
CAML26   CAMLST NAME,DSNAME,,*-*
*---------------------------------------------------------------------*
*                                                                     *
*        DYNAMIC ALLOCATION OF A VSAM DATA SET                        *
*                                                                     *
*---------------------------------------------------------------------*
S99RB    DC    A(X'14010000',0,S99TUPL,0,0)
S99TUPL  DC    A(S99T1,S99T2,S99T4+VL)
S99T1    DC    XL2'55,1,8',C'$$VERIFY' DDNAME
S99T2    DC    AL2(2,1,44),CL44' '     DSNAME
DSNAME   EQU   S99T2+6,44
S99T4    DC    AL2(4,1,1),X'08'        DISP=SHR
*---------------------------------------------------------------------*
*                                                                     *
*        DYNAMIC STORAGE AREA                                         *
*                                                                     *
*---------------------------------------------------------------------*
DYN      DSECT
SAVEAREA DS    18F
RETCODE  DS    D
DYNL     EQU   (((*-DYN+4095)/4096)*4096)
*---------------------------------------------------------------------*
*                                                                     *
*        DSECTS FOR SWA/LSQA CONTROL BLOCKS                           *
*                                                                     *
*---------------------------------------------------------------------*
VL       EQU   X'80000000'
**       IEFJESCT TYPE=DSECT           JES CONTROL TABLE
         IKJTCB LIST=NO                SYS1.AMODGEN
         IEZJSCB ,                     SYS1.AMODGEN
JCT      DSECT
         DS    XL16                    PREFIX
         IEFAJCTB ,                    SYS1.AMODGEN
SCT      DSECT
         DS    XL16                    PREFIX
         IEFASCTB ,                    SYS1.AMODGEN
SIOT     DSECT
         DS    XL16                    PREFIX
         IEFASIOT ,                    SYS1.AMODGEN
JFCB     DSECT
         DS    XL16                    PREFIX
         IEFJFCBN ,                    SYS1.AMODGEN
         CVT   LIST=NO,DSECT=YES       COMMUNICATION VECTOR TABLE
*        YREGS                         SYS1.MACLIB
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120
//SYSPRINT DD SYSOUT=*
//*
//LKED    EXEC PGM=HEWL,PARM='MAP,AC=1',COND=(0,NE,ASMXF)
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)
//SYSLMOD  DD DSN=GILBERT.LOAD2(CZX3PSRC),DISP=SHR
//SYSPRINT DD SYSOUT=*
//*
//DD2## DD DISP=(MOD,DELETE),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//DD2   DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//DD3   DD DISP=(MOD,DELETE),DSN=GILBERT.NOTCTLG3,UNIT=3380,SPACE=(1,0)
//*
//PROC    PROC
//FROM    EXEC PGM=CZX3PSRC,PARM=54
//STEPLIB  DD DSN=GILBERT.LOAD2,DISP=SHR
//ABNLTERM DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//*
//STEP53  EXEC PGM=IEFBR14,COND=(53,LT,FROM)
//DDCAT2 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//*
//STEP54  EXEC PGM=IEFBR14,COND=(54,LT,FROM)
//DDCAT2 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)
//*
//STEP55  EXEC PGM=IEFBR14,COND=(55,LT,FROM)
//DDCAT5 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG3,UNIT=3380,SPACE=(1,0)
//*
//STEP56  EXEC PGM=IEFBR14,COND=(56,LT,FROM)
//DD6A DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2(+1),UNIT=3380,SPACE=(1,0)
//DD6B DD DISP=(MOD,CATLG),DSN=GILBERT.NOTCTLG2(MM),
// UNIT=3380,SPACE=(1,0)
//VFY  DD DSN=PPV.VFY,DISP=SHR
//*
//STEP57  EXEC PGM=IEFBR14,COND=(57,LT,FROM)
//VFY  DD DSN=GILBERT.VFY2,AMP='AMORG',DISP=SHR
//        PEND
//*
//EXECPROC EXEC PROC
