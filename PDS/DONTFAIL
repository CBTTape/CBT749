//GILBERTF JOB (ACCT#),DONTFAIL,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)
         LCLC  &REL,&WTO1,&DSNAME
***********************************************************************
*                                                                     *
* MODULE NAME = DONTFAIL                                              *
*                                                                     *
* DESCRIPTIVE NAME = DUMMY OUT NEXT STEP'S UNCATALOGED DATA SETS      *
*                                                                     *
* FUNCTION = This program has been designed to prevent jobs that      *
*            accept multiple inputs from failing in the middle        *
*            of the night because of a "typo" in a data set name.     *
*            When DONTFAIL detects that an input data set is not      *
*            cataloged, it converts it to a null data set and         *
*            allows the job to run with partial input.                *
*                                                                     *
* STATUS = R207                                                       *
*                                                                     *
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA                                           *
*                   STRING macro R507                                 *
*                                                                     *
*    AUTHORIZATION = APF                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
* MODULE TYPE = PROCEDURE, (Batch Program)                            *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 4K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   *
*                 SUPERVISOR STATE, KEY 1                             *
*                                                                     *
* OPERATION = see below                                               *
*                                                                     *
*            DONTFAIL must be executed immediately before the job     *
*            step to "protect", as shown in the following example:    *
*                                                                     *
*              //DONTFAIL EXEC PGM=DONTFAIL                           *
*              //*                                                    *
*              //SORT53    EXEC PGM=SORT                              *
*              //SORTIN     DD DSN=USER.INPUT1,DISP=SHR               *
*              //           DD DSN=USER.INPUT2,DISP=SHR               *
*                                                                     *
*            If any input data set in step SORT52 in not cataloged,   *
*            DONTFAIL will make it a null data set, preventing the    *
*            job from failing with a DATA SET NOT FOUND error.        *
*                                                                     *
*            To detect uncataloged data sets and correct them,        *
*            DONTFAIL proceeds as follows:                            *
*                                                                     *
*            1. scan the SWA control blocks that represent            *
*               the following step's DD statements for input          *
*               data sets (i.e. DISP=OLD or DISP=SHR)                 *
*            2. check the catalog status of each input data set       *
*            3. modify SWA control blocks to convert each             *
*               non-cataloged data set to a null data set             *
*            4. set DCB attributes (optional, see below)              *
*                                                                     *
*            NOTES:                                                   *
*                                                                     *
*              a. DONTFAIL must be executed once for every            *
*                 job step that needs to be protected.                *
*                                                                     *
*              B. Prior to using DONTFAIL, you must allocate and      *
*                 catalog an empty disk data set and specify its      *
*                 name in the SETC instruction below.  You can use    *
*                 an already-defined pattern DSCB if it has been      *
*                 created with RECFM=,LRECL=0,BLKSIZE=0.              *
*                                                                     *
*              C. The last DD in a concatenation (or the only DD      *
*                 of a non-concatenated data set) is changed to       *
*                 DD DUMMY; for other DD statements, the DSN          *
*                 is changed to &DSNAME                               *
*                                                                     *
&DSNAME SETC 'SYS2.DONTFAIL'      <=== DSN of the empty data set
*                                                                     *
*            DCB ATTRIBUTES                                           *
*                                                                     *
*              When changing the DSN of a data set in a concate-      *
*              nation, DONTFAIL also carries DCB attributes (RECFM,   *
*              LRECL, BLKSIZE) from DDs previously concatenated to    *
*              the same DDname. This prevents utility programs such   *
*              as SORT or IDCAMS REPRO from failing when the empty    *
*              data set has incompatible DCB attributes or no DCB     *
*              attributes at all.                                     *
*                                                                     *
*              Example:                                               *
*                                                                     *
*                //COPY53  EXEC PGM=IDCAMS                            *
*                //DD1      DD DSN=USER.INPUT1,DISP=SHR,              *
*                //            RECFM=FB,LRECL=124                     *
*                //         DD DSN=USER.INPUT2,DISP=SHR               *
*                //         DD DSN=USER.INPUT3,DISP=SHR               *
*                //DD2      DD DSN=USER.INPUT4,DISP=SHR,              *
*                //            RECFM=FB,LRECL=124                     *
*                                                                     *
*                In this example, if USER.INPUT2 is not cataloged,    *
*                it is changed to DSN=&DSNAME, and                    *
*                RECFM=FB,LRECL=124,BLKSIZE=124 are added also.       *
*                If BLKSIZE is not specified, it is set equal to      *
*                LRECL+4 if RECFM=VB was specified, otherwise,        *
*                BLKSIZE is set equal to LRECL.  In this example      *
*                also, if USER.INPUT3 or USER.INPUT4 are not          *
*                cataloged, they are changed to DD DUMMY.             *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*   $100 Program rewritten for MVS/ESA                                *
*   $101 Ignore data sets with VOL=REF to a DISP=NEW DD               *
*   $102 Force SDATA=(LSQA,SWA) in case of an abend                   *
*   $103 Change to DSN=&DSNAME instead of DD DUMMY                    *
*        if JCL specifies FREE=CLOSE                                  *
*   $104 Ignore temporary data sets                                   *
*   $105 Invoke PGM=RECALL if it's been linked with DONTFAIL          *
*   $106 Change STRING GENERATE to STRING 507 format                  *
*   $207 OS/VS2                                                       *
*                                                                     *
***********************************************************************
&REL     SETC  '207'
DONTFAIL CSECT
         DC    C'GSF UTILITIES - DONTFAIL R&REL '
BEGIN    LR    R12,R15
         USING BEGIN,R12
         LR    R5,R1                   JCL PARM
         MODESET MODE=SUP              SWITCH TO SUPERVISOR MODE
         ESTAE DUMPOPT,CT
         GETMAIN RU,LV=DYNAML,SP=230,KEY=1,BRANCH=YES
         ST    R1,8(,R13)              chain save areas
         MODESET EXTKEY=JES            SWITCH TO KEY=1
         ST    R13,4(,R1)              chain save areas
         LR    R13,R1                  ADDRESS OF DYNAMIC STORAGE AREA
         USING DYNAM,R13
         LA    R0,DYNAM+72             CLEAR WORKING STORAGE TO X'00'
         LA    R1,DYNAML-72            CLEAR WORKING STORAGE TO X'00'
         SLR   R15,R15                 CLEAR WORKING STORAGE TO X'00'
         MVCL  R0,R14                  CLEAR WORKING STORAGE TO X'00'
         ST    R5,PARMADDR             addr of JCL PARM
***********************************************************************
*                                                                     *
*        LOCATE TCB, JSCB, GDGNT.                                     *
*        LOCATE SCT AND 1ST SIOT FOR NEXT STEP.                       *
*                                                                     *
***********************************************************************
         L     R1,540(,0)              PSATOLD
         L     R3,TCBJSCB-TCB(,R1)     GET THE ADDRESS OF MY JSCB
         USING IEZJSCB,R3
         L     R4,JSCBJCT              Address of JCT prefix
         USING INJMJCT-16,R4
*
         ICM   R1,B'0111',JCTGDGNT     3-BYTE SVA OF GDG NAME TABLE
         BZ    OWNSCT                  JUMP IF THERE IS NO GDGN TABLE
         LA    R1,16(,R1)              CONVERT SVA TO 24-BIT ADDRESS
         ST    R1,GDGNTPTR             KEEP ADDRESS OF GDG NAMES TABLE
*
OWNSCT   SLR   R5,R5
         ICM   R5,B'0111',JSCSCTP      3-BYTE SVA OF CURRENT STEP'S SCT
         USING INSMSCT-16,R5
*
NEXTSCT  ICM   R5,B'0111',SCTANSCT     LOAD 3-BYTE SVA OF NEXT SCT
         BZ    RETURN                  RETURN IF THERE IS NO NEXT STEP
         ICM   R1,B'0111',SCTFSIOT     LOAD 3-BYTE SVA OF 1ST SIOT
         BZ    RETURN                  NO DD CARDS, RETURN
***********************************************************************
*                                                                     *
*        LOOP THRU THE SIOT BLOCKS                                    *
*                                                                     *
***********************************************************************
*LOOP
LOOPSIOT LA    R6,16(,R1)              ADDRESS OF SIOT
         USING SIOT,R6
         IC    R1,SEQNO                INCREMENT CURRENT SEQNO
         LA    R1,1(,R1)               INCREMENT CURRENT SEQNO
         STC   R1,SEQNO                INCREMENT CURRENT SEQNO
         TM    SCTSBYT1,SIOTCCAT       CHECK FOR CONCATENATION
         BO    TESTDISP                JUMP IF NO DDNAME
         MVC   DDNAME,SCTDDNAM         KEEP DDNAME
         MVI   SEQNO,0                 RESET DDSEQ
         SLR   R0,R0
         STCM  R0,B'0001',RECFM        zero DCB attributes
         STCM  R0,B'0011',LRECL        zero DCB attributes
         STCM  R0,B'0011',BLKSIZE      zero DCB attributes
*
TESTDISP TM    SCTSBYT3,SCTSOLD        Check for DISP=OLD (or SHR)
         BNO   NEXTSIOT                JUMP IF NOT DISP=OLD
         CLI   SCTUTYPE,C' '           CHECK UNIT NAME
         BH    NEXTSIOT                JUMP IF THERE IS A UNIT NAME
*
*        Ignore DD with VOL=REF to a DISP=NEW data set
*
         ICM   R1,B'0111',SIOTVRSB     LOAD 3-BYTE SVA OF VOL=REF SIOT
         BZ    LOCJFCB                 NO VOL=REF, JUMP
         LA    R1,16(,R1)              CONVERT SVA TO 24-BIT ADDRESS
         TM    SCTSBYT3-SIOT(R1),SCTSNEW   VOL=REF DD has DISP=NEW?
         BO    NEXTSIOT                yes, ignore current DD
*
LOCJFCB  ICM   R1,B'0111',SCTPJFCB     LOAD 3-BYTE SVA OF JFCB
         LA    R7,16(,R1)              ADDRESS OF JFCB
         USING JFCB,R7
         TM    JFCBIND2,JFCTEMP        temporary data set?
         BO    NEXTSIOT                yes, ignore current DD
         CLI   JFCBELNM,C'+'           DSNAME(+1)  ?
         BE    NEXTSIOT                YES, IGNORE
         MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE
*
SAVEDCB  ICM   R0,B'0001',JFCRECFM     RECFM present on this DD?
         BZ    SAVEDCB2                no, jump
         STCM  R0,B'0001',RECFM        save non-zero DCB attributes
SAVEDCB2 ICM   R0,B'0011',JFCLRECL     LRECL present on this DD?
         BZ    SAVEDCB8                no, jump
         STCM  R0,B'0011',LRECL        save non-zero DCB attributes
         ICM   R0,B'0001',JFCRECFM     RECFM present on this DD?
         BNZ   SAVEDCB8                yes, jump
         MVI   RECFM,JFCFIX+JFCRFB     if LRECL is present but RECFM   +
                                       is not, assume RECFM=FB
SAVEDCB8 ICM   R0,B'0011',JFCBLKSI     LRECL present on this DD?
         BZ    *+8                     no, jump
         STCM  R0,B'0011',BLKSIZE      save non-zero DCB attributes
*--------------------------------------------------------------------*
*                                                                    *
*        IF THE CURRENT DATA SET IS A GDG, SCAN THE GDG NAMES TABLE  *
*        FOR THE CURRENT APPARENT GEN (0), IF ANY.                   *
*                                                                    *
*--------------------------------------------------------------------*
GDG000   TM    JFCBIND1,JFCGDG         CHECK GDG INDICATOR
         BNO   GDG099                  JUMP IF NOT GDG
         ICM   R1,B'1111',GDGNTPTR     LOAD ADDR OF GDG NAMES TABLE
         BZ    GDG080                  JUMP IF NO GDGNT
         USING GDGNTABL,R1
*--loop
GDG010   SLR   R14,R14                 PREPARE IC
         IC    R14,GDGNNO              GET NUMBER OF ENTRIES
*----loop
GDG015   CLC   GDGNGDG,DSNAME          COMPARE TABLE ENTRY W/ DSNAME
         BE    GDG040                  JUMP IF NOT THE SAME
         LA    R1,GDGNGDG2             BUMP UP TO NEXT ENTRY IN BLOCK
         BCT   R14,GDG015              LOOP UNTIL END OF BLOCK
*----endloop
         ICM   R1,B'1111',GDGNNEXT     LOAD ADDR OF NEXT GDGNT BLOCK
         BNZ   GDG010                  PROCESS NEXT BLOCK
*--endloop
         NI    CTGOPTN3,255-CTGGDGL    CTGWAGB IS NOT SET
         B     GDG080                  EXIT GDGNT SCAN LOOP
*
GDG040   LA    R0,GDGNGDGZ             GET PTR TO APPARENT GEN(0)
         ST    R0,CTGWAGB              SET POINTER IN SVC 26 WORK AREA
         OI    CTGOPTN3,CTGGDGL        SHOW CTGWAGB IS SET
         DROP  R1                      GDGNTABL
*
*        append relative gen number to end of data set name
*
GDG080   STRING (JFCBDSNM,,T),'(',(JFCBELNM,,T),')',INTO=DSNAME
GDG099   EQU   *
*--------------------------------------------------------------------*
*                                                                    *
*        GET DEVICE TYPE INFORMATION FROM THE CATALOG.               *
*                                                                    *
*--------------------------------------------------------------------*
LOCATE   LA    R0,DSNAME               DATA SET NAME
         ST    R0,CTGENT               ENTRY ADDRESS
         OI    CTGOPTN1,CTGNAME        CTGENT POINTS TO ENTRY NAME
         LA    R0,CTGWA                WORK AREA FOR SUPERLOCATE
         ST    R0,CTGWKA               WORK AREA FOR SUPERLOCATE
         OI    CTGOPTN3,CTGSUPLT       SUPER LOCATE
         OI    CTGOPTN3,CTGAM0         OS/VS2 CATALOG MGMT REQUEST
         LA    R0,CTGVL                GET ADDR OF VOLUME LIST
         ST    R0,CTGWAVL              UPDATE PTR
         LA    R0,CTGVLLEN             GET LENGTH OF VOLUME LIST
         STH   R0,CTGWALV              UPDATE LENGTH
         LOCATE CTGPL                  ISSUE SUPERLOCATE
         LTR   R15,R15                 DATA SET cataloged?
         BZ    NEXTSIOT                yes, ignore it
*---------------------------------------------------------------------*
*                                                                     *
*        If this data set is not cataloged, modify the SIOT & JFCB    *
*                                                                     *
*          1.  if the DD has other DDs concatenated behind it,        *
*              or the DD has FREE=CLOSE,                              *
*                set DSNAME to "&DSNAME"                              *
*              else                                                   *
*                set DD DUMMY flag in SIOT                            *
*          2.  carry DCB attributes from previous DD in               *
*              concatenation                                          *
*          3.  Issue message to operator                              *
*                                                                     *
*---------------------------------------------------------------------*
MSG00    MVC   WTO1L(WTO1LL),WTO1M     move model to dynamic
         STRING '&DSNAME',INTO=DSNAME
*
         ICM   R1,B'0111',SCTPSIOT     SVA OF NEXT SIOT
         BZ    MSG12                   last DD, jump
         LA    R1,16(,R1)              CONVERT SVA TO 24-BIT ADDRESS
         TM    SCTSBYT1-INDMSIOT(R1),SIOTCCAT   concatenated DD?
         BO    MSG20                   yes, jump
         TM    SCTSBYT2,SIOCLUNL       FREE=CLOSE?
         BO    MSG20                   yes, jump
*
MSG12    STRING 'DD DUMMY',INTO=DSNAME
         OI    SCTSBYT1,SCTDUMMY       DD DUMMY
*
MSG20    STRING 'DONTFAIL - ',                                         +
               (JFCBDSNM,,T),' changed to ',(DSNAME,,T),               +
               '  (DDN=',DDNAME,       do not close parenthesis        +
               INTO=WTO1TEXT
         CLI   SEQNO,0                 first DD in concat?
         BE    MSG80                   yes, jump
         STRING (WTO1TEXT,,T),'+',(SEQNO,FL1,L),                       +
               INTO=WTO1TEXT
*
MSG80    CLC   =C'DD ',DSNAME          changed to DD DUMMY ?
         BE    MSG81                   yes, do not change JFCB
         MVC   JFCBDSNM,DSNAME         move new dsname
*
*        Carry DCB attributes from previous DD
*
MSG81    ICM   R0,B'0001',JFCRECFM     RECFM specified in JCL?
         BNZ   MSG88L                  yes, jump
         MVC   JFCRECFM,RECFM          no, carry from previous DD
MSG88L   ICM   R0,B'0011',JFCLRECL     LRECL specified in JCL?
         BNZ   MSG88B                  yes, jump
         MVC   JFCLRECL,LRECL          no, carry from previous DD
MSG88B   ICM   R1,B'0011',JFCBLKSI     BLKSIZE specified in JCL?
         BNZ   MSG90                   yes, exit
         ICM   R1,B'0011',BLKSIZE      BLKSIZE on previous DD?
         BNZ   MSG88B4                 yes, use it
         ICM   R1,B'0011',LRECL        LRECL on previous DD?
         BZ    MSG90                   no, exit
         TM    JFCRECFM,JFCVAR         RECFM=V ?
         BZ    MSG88B4                 no, set BLKSIZE=LRECL
         LA    R1,4(,R1)               yes, set BLKSIZE=LRECL+4
MSG88B4  STCM  R1,B'0011',JFCBLKSI     update BLKSIZE
*
*        Issue message to operator
*
MSG90    STRING (WTO1TEXT,,T),',DCB=',(JFCRECFM,,X),'/',               X
               (JFCLRECL,H,L),'/',(JFCBLKSI,H,L),')',INTO=WTO1TEXT
         WTO   MF=(E,WTO1L)            NOTIFY PROGRAMMER
*
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     SVA OF NEXT SIOT
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP
*ENDLOOP
         DROP  R5,R6,R7                SCT, SIOT, JFCB
***********************************************************************
*                                                                     *
*        CLEAN-UP, RETURN TO CALLER.                                  *
*                                                                     *
***********************************************************************
RETURN   LR    R1,R13                  addr of work area
         L     R5,PARMADDR             addr of JCL PARM
         L     R13,4(,R13)             caller's save area
         FREEMAIN RU,LV=DYNAML,A=(R1),SP=230,KEY=1,BRANCH=YES
*
*        invoke PGM=RECALL
*
         WXTRN RECALL                  optional
         MODESET KEY=NZERO,MODE=PROB
         ICM   R15,B'1111',=A(RECALL)  get addr of RECALL pgm
         BZ    RETURN99                not available, jump
         LR    R1,R5                   restore parm address
         BALR  R14,R15              <- invoke PGM=RECALL
*
         SLR   R15,R15                 RC=00
RETURN99 EQU   *
         SVC   3                       GOBACK
*
&WTO1    SETC  (120)' '
WTO1M    WTO   '&WTO1',MF=L,ROUTCDE=11
*---------------------------------------------------------------------
*        ESTAE routine: changed dump options
*---------------------------------------------------------------------
         USING SDWA,R1
DUMPOPT  OI    SDWASDA0,SDWALSQA+SDWASWA dump LSQA and SWA
         OI    SDWADPFS,SDWADLST       DUMP OPTIONS VALID
         BR    R14
*---------------------------------------------------------------------
*        DYNAMIC STORAGE AREA, BASED BY R13.
*---------------------------------------------------------------------
DYNAM    DSECT
         DS    18F                     STANDARD SAVE AREA
GDGNTPTR DS    A(GDGNTABL)             POINTER TO GDG NAMES TABLE
PARMADDR DS    A                       JCL PARM
TAPE1    DS    XL2                     INTERNAL DD# FOR 1ST TAPE DD
DDNAME   DS    CL8                     DDNAME
RECFM    DS    X                       RECFM
LRECL    DS    H                       LRECL
BLKSIZE  DS    H                       BLKSIZE
SEQNO    DS    FL1                     SEQNO (concatenation)
DSNAME   DS    CL44                    MODIFIABLE DSNAME
WTO1L    WTO   '&WTO1',MF=L,ROUTCDE=11
WTO1LL   EQU   *-WTO1L
WTO1TEXT EQU   WTO1L+4,120
*---------------------------------------------------------------------*
*        CATALOG PARAMETER LIST
*---------------------------------------------------------------------*
CTGPL    DS    0D
CTGOPTN1 DS    B              FIRST OPTION BYTE:
CTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR
CTGOPTN2 DS    B              SECOND OPTION BYTE
CTGOPTN3 DS    B     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION
CTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION
CTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL
CTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST
CTGOPTN4 DS    B              FOURTH OPTION BYTE
CTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)
CTGENT   DS    A              ADDRESS OF CATALOG RECORD IDENTIFIER
CTGCAT   DS    A              ADDRESS OF CATALOG DSNAME OR ACB
CTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA
CTGOPTNS DS    B              CATALOG MANAGMENT SERVICES REQUEST OPTION
         DS    B              RESERVED
CTGTYPE  DS    C              TYPE OF CATALOG RECORD
CTGNOFLD DS    FL1            NUMBER OF ENTRIES IN CTGFIELD
CTGFDBK  DS    XL2            FEEDBACK AREA (IF NOT SUPERLOCATE)
CTGFBFLG DS    B              FLAGS (SUPERLOCATE)
CTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT
CTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP
CTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED
CTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)
         DS    B              RESERVED (SUPERLOCATE)
CTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD
*---------------------------------------------------------------------*
*        CATALOG WORK AREA
*---------------------------------------------------------------------*
CTGWA    DS    0D
CTGWAVL  DS    A                       PTR TO CTGVL (VOLUME LIST)
CTGWALV  DS    H                       LENGTH OF THE VOLUME LIST
CTGWAVCT DS    H                       # OF VOLSERS RETURNED IN VL
CTGWAUCT DS    H                       MINIMUM # OF VOLS TO BE MOUNTED
CTGWAGCT DS    H                       # OF GENERATIONS CATALOGED
CTGWAGB  DS    A                       PTR TO APPARENT GEN(0)
*---------------------------------------------------------------------*
*        CATALOG VOLUME LIST
*---------------------------------------------------------------------*
CTGVL    DS    0D
CTGVLVOL DS    CL6                     VOLUME SERIAL
CTGVLDEV DS    XL4                     DEVICE TYPE
CTGVLSEQ DS    H                       FILE SEQNO
CTGVLX   DS    19XL12                  VOLUME LIST EXTENSION
CTGVLLEN EQU   *-CTGVL                 LENGTH OF VOLUME LIST
DYNAML   EQU   *-DYNAM
*---------------------------------------------------------------------
*        GDG NAMES TABLE MAPPING (USING IEFZB902 AS A MODEL)
*---------------------------------------------------------------------
GDGNTABL DSECT
GDGNQSVA DS    XL3                     SVA OF NEXT GDGNT RECORD
GDGNTID  DS    X'23'                   GDGNT ID X'23'
GDGNNEXT DS    A                       IN-CORE ADDRESS OF NEXT RECORD
GDGNGDG  DS    CL35                    GDG BASE
GDGNGDGZ DS    C'1234'                 APPARENT (0) GENERATION
GDGNGDG2 DS    CL35,C'1234'            2ND GDG NAME
         DS    CL35,C'1234'            3RD GDG NAME
         DS    CL35,C'1234'            4TH GDG NAME
GDGNNO   DS    FL1                     NUMBER OF ENTRIES
         DS    XL15                    FILLER
GDGNLEN  EQU   GDGNTABL+176
*---------------------------------------------------------------------
*        MAPPING MACROS
*---------------------------------------------------------------------
         PRINT NOGEN
         IKJTCB LIST=NO                TASK CONTROL BLOCK
         IEZJSCB                       JOB STEP CONTROL BLOCK
JCT      DSECT
         IEFAJCTB                      JOB CONTROL BLOCK
SCT      DSECT
         IEFASCTB                      STEP CONTROL BLOCK
SCTSNEW  EQU   4                       BIT 5 - NEW DATA SET
SCTSOLD  EQU   1                       BIT 7 - OLD DATA SET
SIOT     DSECT
         IEFASIOT                      STEP I/O TABLE
JFCB     DSECT
         IEFJFCBN LIST=YES             JOB FILE CONTROL BLOCK
         CVT   DSECT=YES               COMMUNICATION VECTOR TABLE
         IHASDWA                       ESTAE
         STRING GENERATE               Generate CSECT
*        YREGS                         REGISTER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   BEGIN
//SYSLIB   DD DSN=SYS1.AMODGEN,DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=GILBERT.FILE183.PDS,DISP=SHR      STRING macro
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120
//SYSPRINT DD SYSOUT=*
//*
//LKED    EXEC PGM=IEWL,PARM='RENT,AC=1'
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)
//         DD *
 CHANGE @STRING(@STRING2)
 INCLUDE SYSLMOD(RECALL)
//SYSLMOD  DD DSN=SYS2.AUTHLIB(DONTFAIL),DISP=SHR
//*
//NULLFIL1 EXEC PGM=DONTFAIL
//SYSUDUMP DD SYSOUT=*
//ABNLIGNR DD DUMMY
//*
//REPRO1   EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//INDD     DD DSN=GILBERT.UNCAT1,LRECL=80,DISP=SHR  ,RECFM=FB
//         DD DSN=GILBERT.X80,DISP=SHR
//         DD DSN=IBMUSER.UNCAT2,DISP=SHR
//OUTDD    DD DUMMY,BLKSIZE=800
 REPRO IFILE(INDD) OFILE(OUTDD)
//DISPMOD  DD UNIT=SYSDA,SPACE=(TRK,0),DSN=&&REFMOD,DISP=MOD
//VOLREF1  DD VOL=REF=*.DISPMOD,DSN=*.DISPMOD,DISP=OLD
//DISPNEW  DD UNIT=SYSDA,SPACE=(TRK,0),DSN=&&REFNEW,DISP=NEW
//VOLREF2  DD VOL=REF=*.DISPNEW,DSN=*.DISPNEW,DISP=OLD
//*
//NULLFIL2 EXEC PGM=DONTFAIL
//SYSUDUMP DD SYSOUT=*
//ABNLIGNR DD DUMMY
//*
//SORT2   EXEC PGM=SORT
//SYSOUT   DD SYSOUT=*
//SORTIN   DD DSN=GILBERT.UNCAT1,LRECL=80,DISP=SHR  ,RECFM=FB
//         DD DSN=GILBERT.X80,DISP=SHR
//         DD DSN=GILBERT.UNCAT2,DISP=SHR
//SORTOUT  DD DUMMY,BLKSIZE=800
 SORT FIELDS=(1,8,CH,A)
