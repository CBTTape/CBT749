//GILBERTT JOB (ACCT#),TRIMMAC,                        OS/VS2
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(1,LT)
//*
//*     THIS PROGRAM CREATES A REDUCED-SIZE MACLIB THAT MAY BE
//*     USED INSTEAD OF THE SYS1.MACLIB/SYS1.AMODGEN CONCATENATION
//*     TO IMPROVE THE PERFORMANCE OF THE ASSEMBLER.
//*
//*     THE "TRIMMAC" LIBRARY IS BUILT AS FOLLOWS:
//*
//*        1. SELECTED MACROS ARE READ FROM DDNAME "SYSLIB",
//*           TRIMMED FROM PL/AS CODE AND OTHER COMMENT LINES,
//*           THEN COPIED TO A TEMPORARY DATA SET.
//*
//*        2. THE SORT UTILITY IS INVOKED TO SORT THE MACROS
//*           IN ASCENDING SEQUENCE OF THEIR SIZE.
//*
//*        3. THE SORTED MACROS ARE WRITTEN TO SYSPUNCH
//*           AS AN IEBUPDTE SYSIN STREAM.
//*
//*        4. IEBUPDTE IS EXECUTED IN THE LAST STEP TO
//*           LOAD THE MACROS INTO THE "TRIMMAC" LIBRARY,
//*           THE SMALLEST MACROS BEING LOADED FIRST.
//*
//*    YOU MAY CUSTOMIZE THE MEMBER LIST AND THE INPUT
//*    CONCATENATION TO ADD OTHER MACROS AND/OR MACRO
//*    LIBRARIES, AS NEEDED.
//*
//*    USE THE "TRIMMAC" LIBRARY INSTEAD OF THE MACLIB/AMODGEN
//*    CONCATENATION TO ASSEMBLE A PROGRAM AND COMPARE THE
//*    BEFORE/AFTER VALUES FOR THE ELAPSED TIME, EXCP COUNT AND
//*    I/O CONNECT TIME.  EXPECT SAVINGS OF 30 TO 60 PERCENT WHEN
//*    "TRIMMAC" IS USED.
//*
//*    MY OS/VS2 "TRIMMAC" PDS IS CURRENTLY ALLOCATED AS FOLLOWS:
//*
//*          UNIT=3390,SPACE=(CYL,(12,,12)),
//*          DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)
//*
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)
TRIMMAC  CSECT
         SAVE  (14,12),,'TRIMMAC &SYSDATE '
         LR    R12,R15
         USING TRIMMAC,R12
         GETMAIN R,LV=DYNAML
         ST    R1,8(,R13)
         ST    R13,4(,R1)
         LM    R13,R1,8(R13)           SET R13, RELOAD R1
         USING DYNAM,R13
         XC    TRTBL,TRTBL             BUILD TRT TABLE (FIRST BLANK)
         MVI   TRTBL+C' ',C' '         BUILD TRT TABLE (FIRST BLANK)
         MVI   TRTNBL,1                BUILD TRT TABLE (1ST NON-BLANK)
         MVC   TRTNBL+1(255),TRTNBL    BUILD TRT TABLE (1ST NON-BLANK)
         MVI   TRTNBL+C' ',0           BUILD TRT TABLE (1ST NON-BLANK)
***********************************************************************
*
*        SECTION 1
*
*              READ MACRO NAMES FROM DDNAME=MEMBERS
*              READ MACRO TEXT FROM DDNAME=SYSLIB
*              WRITE SELECTED LINES TO DDN=SORTIN
*              BUILD TABLE WITH THE NUMBER OF LINES FOR EACH MEMBER
*
***********************************************************************
         OPEN  (MEMBERS,,SYSLIB,,SORTIN,OUTPUT,SYSPRINT,OUTPUT)
         GETBUF SYSLIB,(R3)            GET A BUFFER FROM POOL
         ST    R3,DECB1+12             STORE ITS ADDRESS INTO DECB
         LA    R8,TABLE                START OF TABLE
*LOOP
L1GET    GET   MEMBERS                 GET A MACRO NAME
         CLI   0(R1),C'*'              IS THIS A COMMENT LINE?
         BE    L1GET                   YES, IGNORE IT
         MVC   BLDLIST(4),=Y(1,12)     HEADER
         MVC   MEMBER,0(R1)            MEMBER NAME
         BLDL  SYSLIB,BLDLIST          LOCATE MEMBER
         LTR   R15,R15
         BNZ   L1NOTF                  NOT FOUND, ERROR
         ZAP   RECNO,=P'0'             RESET COUNTER
         ZAP   DWD,=P'0'               INIT COUNTER & FLAGS
         FIND  SYSLIB,TTRN,C           POINT TO START OF MEMBER
*--LOOP
L1GETB   READ  DECB1,SF,SYSLIB,*-*,'S' READ A BLOCK
         CHECK DECB1
         L     R3,DECB1+12             BUFFER ADDRESS FROM DECB
*----LOOP
L1GETR   AP    RECNO,=P'1'             COUNT INPUT RECORDS
         BAL   R14,SELECT              SELECT/SKIP RECORDS
         B     L1NEXTR              +0 RECORD SHOULD BE IGNORED
         PUT   SORTIN               +4 RECORD SHOULD BE WRITTEN
         MVC   0(72,R1),0(R3)          MOVE RECORD
         MVC   72(8,R1),MEMBER         MOVE MEMBER NAME
         AP    DWD+4(4),=P'1'          COUNT WRITTEN RECORDS
L1NEXTR  LH    R14,SYSLIB+82           R14 CONTAINS RECORD LENGTH
         L     R15,DECB1+12            ADDRESS OF BUFFER
         AH    R15,SYSLIB+62           ADD BLKSIZE FROM DCB
         L     R1,DECB1+16             IOB ADDRESS FROM DECB
         SH    R15,14(,R1)             SUBTRACT RESIDUAL COUNT
         SLR   R15,R14                 LAST BYTE OF CURRENT BLOCK
         BXLE  R3,R14,L1GETR           LOOP UNTIL END-OF-BLOCK
*----ENDLOOP
         B     L1GETB                  NEXT BLOCK
*--ENDLOOP
L1EOM    ZAP   DWD,DWD                 ANY LINES SELECTED?
         BZ    L1NOTF                  NO, IGNORE
         MVC   MESSAGE+08(8),MEMBER    BUILD PRINT RECORD
         OI    DWD+7,15                NO SIGN
         UNPK  MESSAGE+29(5),DWD+5(3)  BUILD PRINT RECORD
         OI    RECNO+3,15              NO SIGN
         UNPK  MESSAGE+59(5),RECNO+1(3) BUILD PRINT RECORD
         PUT   SYSPRINT,MESSAGE        WRITE PRINT RECORD
         MVC   0(4,R8),DWD+4           MOVE NUMBER OF LINES TO TABLE
         LA    R8,4(,R8)               BUMP POINTER
L1NOTF   B     L1GET                   NEXT SYSIN RECORD (MACRO NAME)
*ENDLOOP
L1EOD    CLOSE (MEMBERS,,SYSLIB,,SORTIN)
         FREEPOOL MEMBERS
         FREEPOOL SYSLIB
***********************************************************************
*        SECTION 2: UPDATE RECORDS TO ADD MACRO SIZE IN POS 81-84
***********************************************************************
         OPEN  (SORTIN,UPDAT)
         LA    R8,TABLE-4              START OF TABLE
*LOOP
L2GET    GET   SORTIN
         LTR   R3,R1                   PASS RECORD ADDRESS
         BZ    L2EOD                   EOJ, EXIT
         CLC   DWD,72(R3)              SAME MEMBER?
         BE    L2PUT                   YES, JUMP
         MVC   DWD,72(R3)              NO, KEEP NAME
         LA    R8,4(,R8)               NEXT ENTRY IN TABLE
L2PUT    MVC   80(4,R3),0(R8)          NUMBER OF LINES
         PUTX  SORTIN                  REWRITE RECORD
         B     L2GET
*ENDLOOP
L2EOD    CLOSE SORTIN
         FREEPOOL SORTIN
***********************************************************************
*        SECTION 3: SORT MACROS BY SIZE, WRITE IEBUPDTE INPUT
***********************************************************************
         LINK  EP=SORT,PARAM=H0,VL=1   SORT WORK DATA SET
         OPEN  (SORTOUT,,SYSPUNCH,OUTPUT)
         MVI   DWD,0                   FIRST TIME
*LOOP
L3GET    GET   SORTOUT
         LTR   R3,R1                   PASS RECORD ADDRESS
         BZ    L3EOD                   EOJ, EXIT
         CLC   DWD,72(R1)              SAME MEMBER?
         BE    L3PUT                   YES, JUMP
         MVC   DWD,72(R1)              NO, KEEP NAME
         PUT   SYSPUNCH
         MVC   0(13,R1),=C'./ ADD NAME= '
         MVC   13(67,R1),12(R1)        BLANK OUT REST OF RECORD
         MVC   12(8,R1),DWD            MOVE MEMBER NAME
L3PUT    PUT   SYSPUNCH
         MVC   0(80,R1),0(R3)          MOVE RECORD
         B     L3GET
*ENDLOOP
L3EOD    CLOSE (SORTOUT,,SYSPUNCH,,SYSPRINT)
         L     R13,4(,R13)
         RETURN (14,12),RC=00
*
*        RECORD SELECTION ROUTINE
*
SELECT   TM    DWD,1                   MEND CARD FOUND YET?
         BOR   R14                     YES, SKIP TEXT AFTER MEND CARD
         TM    DWD,2                   CHECK CONTINUATION FLAG
         BO    L1SKIP                  JUMP IF CONTINUED COMMENT
         TM    DWD,4                   CHECK CONTINUATION FLAG
         BO    L1CONT                  JUMP IF CONTINUED INSTRUCTION
         CLI   0(R3),C'*'              ASM COMMENT
         BE    L1SKIP                  JUMP IF ASM COMMENT LINE
         CLI   1(R3),C'*'              MACRO COMMENT
         BE    L1SKIP                  JUMP IF MACRO COMMENT LINE
         CLI   0(R3),C'/'              IS THIS A JCL LINE?
         BE    L1SKIP                  YES, IGNORE IT
*
         TRT   0(16,R3),TRTBL          FIND FIRST BLANK
         BZ    L1CONT                  FAILED, WRITE RECORD
         TRT   0(64,R1),TRTNBL         FIND FIRST NON-BLANK
         BZ    L1CONT                  FAILED, WRITE RECORD
         CLC   =C'MEND ',0(R1)         CHECK OPCODE
         BNE   L1SPACE                 JUMP IF NOT 'MEND'
         OI    DWD,1                   REMEMBER "MEND" CARD FOUND
L1SPACE  CLI   0(R3),C' '              ANY LABEL ON THIS LINE?
         BNE   L1CONT                  YES, WRITE IT
         CLC   =C'SPACE ',0(R1)        CHECK OPCODE
         BE    L1SKIP                  JUMP IF 'SPACE'
         CLC   =C'EJECT ',0(R1)        CHECK OPCODE
         BNE   L1CONT                  RECORD SHOULD BE WRITTEN
*
L1SKIP   NI    DWD,255-2               RESET CONTINUATION FLAG
         CLI   71(R3),C' '             CHECK FOR A CONTINUATION
         BER   R14                     QUIT WITH RC4 IF NO CONTINUATION
         OI    DWD,2                   SET CONTINUATION FLAG
         BR    R14                     GOBACK
*
L1CONT   NI    DWD,255-4               RESET CONTINUATION FLAG
         CLI   71(R3),C' '             CHECK FOR A CONTINUATION
         BE    4(,R14)                 GOBACK, WRITE RECORD
         OI    DWD,4                   SET CONTINUATION FLAG
         B     4(,R14)                 GOBACK, WRITE RECORD
H0       DC    H'0'
MESSAGE  DC   C' MEMBER 12345678 PROCESSED - 12345 RECORDS SELECTED OUT+
                OF 12345'
MEMBERS  DCB   DSORG=PS,MACRF=GL,DDNAME=MEMBERS,EODAD=L1EOD
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FBA,LRECL=L'MESSAGE
SYSPUNCH DCB   DSORG=PS,MACRF=PL,DDNAME=SYSPUNCH,RECFM=FB,LRECL=80
SORTIN   DCB   DSORG=PS,MACRF=(GL,PL),DDNAME=SORTIN,EODAD=EOD11,       X
               RECFM=FB,LRECL=72+8+4
SORTOUT  DCB   DSORG=PS,MACRF=(GL,PL),DDNAME=SORTOUT,EODAD=EOD11
EOD11    SLR   R1,R1
         BR    R14
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,EODAD=L1EOM,             X
               BUFNO=1,NCP=1,RECFM=FB,LRECL=80
DYNAM    DSECT
         DS    18F
DWD      DS    D
RECNO    DS    PL4
BLDLIST  DS    Y(1,12),CL8,4X          BLDL/FIND
MEMBER   EQU   BLDLIST+4,8             BLDL/FIND
TTRN     EQU   MEMBER+8,4              BLDL/FIND
TRTBL    DS    XL256                   TRT TABLE (FIND FIRST BLANK)
TRTNBL   DS    XL256                   TRT TABLE (FIND FIRST NON-BLANK)
TABLE    DS    999PL4                  RECORD NUMBERS
DYNAML   EQU   *-DYNAM
*        YREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120
//SYSPRINT DD SYSOUT=*
//*
//GO      EXEC PGM=LOADER,PARM=NOPRINT
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)
//SYSPRINT DD SYSOUT=*
//SYSOUT   DD SYSOUT=*
//SORTIN   DD UNIT=SYSALLDA,SPACE=(CYL,20),DSN=&&SORTIN
//SORTOUT  DD DSN=*.SORTIN,VOL=REF=*.SORTIN,DISP=(OLD,DELETE)
//SORTWK01 DD UNIT=SYSALLDA,SPACE=(CYL,25),DSN=&&SORTWK01
//SYSPUNCH DD UNIT=SYSALLDA,SPACE=(CYL,20),DISP=(,PASS)
//SYSIN    DD *
 SORT FIELDS=(81,4,CH,A),EQUALS
/*
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR,           <== INPUT LIBRARY
// UNIT=SYSALLDA,VOL=SER=Z5RES1
//         DD DSN=SYS1.AMODGEN,DISP=SHR,          <== INPUT LIBRARY
// UNIT=SYSALLDA,VOL=SER=Z5RES1
//         DD DSN=SYS1.ATSOMAC,DISP=SHR,          <== INPUT LIBRARY
// UNIT=SYSALLDA,VOL=SER=Z5RES1
//         DD DSN=SYS1.SHASMAC,DISP=SHR           <== INPUT LIBRARY
//* THESE ARE MY OWN LIBRARIES
//         DD DSN=GILBERT.GSF.SOURCE,DISP=SHR     <== INPUT LIBRARY
//MEMBERS  DD *
ABEND              MVS
ACB                DFP VSAM
ACBVS              DFP VSAM
ATTACH             MVS
BLDL               DFP
CALL               MVS
CALLTSSR           TSO/E
CAMLST             DFP
CHECK              DFP
CIRB               MVS
CLOSE              DFP
CVT                MVS
DCB                DFP
DCBD               DFP
DEBCHK             DFP
DELETE             MVS
DEQ                MVS
DETACH             MVS
DEVTYPE            DFP
DOM
DYNALLOC           MVS
ENDREQ             DFP VSAM
ENQ                MVS
ERASE              DFP VSAM
ESTAE              MVS
EXCP               DFP
EXLST              DFP VSAM
EXLVS              DFP VSAM
EXTRACT            BCP
FEOV               DFP
FIND               DFP BPAM
FREEMAIN           MVS
FREEPOOL           DFP
GET                DFP
GETBUF             DFP
GETLINE            TSO
GETMAIN            MVS
GTSIZE             TSO
ICHMM
ICHPRCVT           RACF
ICHSAFP            RACROUTE
IDACBACB           DFP VSAM
IDACB1             DFP VSAM
IDACB2             DFP VSAM
IDACB3             DFP VSAM
IDAVSACB           DFP VSAM
IDAVSCB3           DFP VSAM
IDAVSOPT           DFP VSAM
IDAVSRPL           DFP VSAM
IDENTIFY           MVS
IECDDCE            MVS IOS
IECDIOCM           MVS IOS
IECDPPL            DFP PURGE PARM LIST
IECSDSL1           DFP
IEEBASEA           MVS MASTER SCHED RES DATA AREA
IEECHAIN           MVS CSCB
IEECUCM            MVS UNIT CONTROL MODULE
IEESMCA            SMF
IEFAJCTB           DFP JOB CONTROL BLOCK + ACCOUNT TABLE
IEFALLCT           MVS
IEFASCTB           DFP STEP CONTROL BLOCK
IEFASIOT           DFP STEP I/O TABLE
IEFJCTX            MVS JCT EXTENSION
IEFJESCT           MVS
IEFJFCBN           DFP
IEFJFCBX           DFP
IEFJSCVT           MVS
IEFJSSIB           MVS
IEFJSSOB           MVS
IEFJSSVT           MVS
IEFQMNGR           MVS SWA MANAGER
IEFSSCS            CANCEL/STATUS
IEFSSOBH           MVS
IEFSSREQ           MVS
IEFTCT             SMF
IEFTIOT1           MVS
IEFUCBOB           MVS
IEFZB4D0                      DYNALLOC REQUEST BLOCK
IEFZB4D2                      DYNALLOC TEXT UNIT KEYS
IEFZB505           DFP
IEZATTCH           MVS
IEZBITS            MVS BIT0-BIT7
IEZDEB             DFP
IEZIOB             DFP
IEZJSCB            MVS
IFGACB             DFP VSAM
IFGACBVS           DFP VSAM
IFGRPL             DFP VSAM
IFGRPLVS           DFP VSAM
IHAACEE            RACF
IHAASCB            MVS
IHAASVT            MVS
IHAASXB            MVS
IHACDE             MVS
IHADECB            DFP
IHADSAB            DFP
IHADVA             DFP
IHAGDA             MVS CSV
IHALDA             MVS CSV
IHALLE             MVS
IHALPDE            MVS
IHAOUXB            SRM
IHAPDS             DFP
IHAPSA             MVS
IHARB              MVS
IHARMPL            MVS (RESMGR)
IHASCA             MVS SPIE/ESPIE CONTROL AREA
IHASCB             MVS STAE CONTROL BLOCK
IHASCVT            MVS
IHASDWA            MVS
IHASPQE            MVS
IHAXTLST           MVS
IHBERMAC           DFP
IHBINNRA           MVS
IHBINNRB           MVS
IHBOPLST           MVS
IHBRDWRD           DFP BSAM/BPAM
IHBRDWRS           DFP BSAM/BPAM
IHB01              DFP
IKJCPPL            TSO/E
IKJECT             TSO/E
IKJEFFDF           TSO/E DAIRFAIL
IKJEFFMT           TSO/E
IKJENDP            TSO/E
IKJGTPB            TSO/E
IKJIDENT           TSO/E
IKJIOPL            TSO/E
IKJKEYWD           TSO/E
IKJLSD             TSO/E
IKJNAME            TSO/E
IKJPARM            TSO/E
IKJPOSIT           TSO/E
IKJPPL             TSO/E
IKJPSCB            TSO/E
IKJRB              MVS
IKJRLGB            TSO/E
IKJRLSA            TSO/E
IKJSUBF            TSO/E
IKJTAXE            TSO/E
IKJTCB             MVS
IKJTMPWA           TSO/E
IKJTPL             TSO/E
IKJTSB             TSO/E
IKJTSMSG           TSO/E
IKJUPT             TSO/E
IKTTCAST           TSO/VTAM
IKTTSBX            TSO/VTAM
IRAOUCB            MVS
LINK               MVS
LOAD               MVS
LOCATE             DFP
MGCR
MODESET            MVS
NOTE               DFP
OBTAIN             DFP
OPEN               DFP
POINT              DFP
POST               MVS
PURGE              DFP
PUT                DFP
PUTLINE            TSO
PUTX               DFP
RACHECK            RACF
RACINIT            RACF
RACROUTE           MVS/SAF RACF
RDJFCB             DFP
READ               DFP
RELSE              DFP
RESERVE            MVS
RETURN             MVS
RPL                DFP VSAM
RPLVS              DFP VSAM
SAVE               MVS
SETLOCK            MVS
SETRP              MVS
SHOWCB             DFP VSAM
SPIE               MVS
STACK              TSO/E
STAE               OS/360
STATUS             MVS
STAX               TSO/E
STCOM              TSO/E
STFSMODE           TSO/E
STIMER             MVS
STLINENO           TSO/E
STTMPMD            TSO/E
SYNADAF            DFP
SYNADRLS           DFP
SYNCH              MVS
SYSEVENT           SRM
TCLEARQ            TSO/E
TESTAUTH           MVS
TESTCB             DFP VSAM
TGET               TSO/E
TIME               MVS
TPUT               TSO/E
TRKCALC            DFP
TRUNC              DFP
TTIMER             MVS
WAIT               MVS
WRITE              DFP
WTO                MVS
XCTL               MVS
*
*        THESE ARE MACROS FROM MY OWN LIBRARIES
*
STRING             ---
//*--------------------------------------------------------------------
//LOADPROC PROC DS='GILBERT.TRIMMAC',            <== DSNAME
//            UNIT=3390,                         <== UNIT NAME
//          VOLSER=,                             <== VOL SER
//         BLKSIZE=0                             <== BLOCK SIZE (SDB)
//DELOLD  EXEC PGM=IEFBR14
//DELOLD   DD DSN=&DS,UNIT=&UNIT,SPACE=(1,0),DISP=(MOD,DELETE)
//*
//LOAD    EXEC PGM=IEBUPDTE,PARM=NEW
//SYSIN    DD DSN=*.GO.SYSPUNCH,DISP=(OLD,PASS)
//SYSUT2   DD DSN=&DS,DISP=(,CATLG,DELETE),
// UNIT=&UNIT,
// SPACE=(CYL,(20,1,20),RLSE,CONTIG),
// VOL=SER=&VOLSER,
// DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=&BLKSIZE)
//SYSPRINT DD DUMMY
//LOADPROC PEND
//*--------------------------------------------------------------------
//TRIMMAC  EXEC LOADPROC                          <== EXEC PROC
//
