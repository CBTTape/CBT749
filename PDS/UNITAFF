//GILBERTA JOB (ACCT#),UNITAFF,
// NOTIFY=&SYSUID,
//*RESTART=UNITAFF,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)
***********************************************************************
*                                                                     *
* MODULE NAME = UNITAFF                                               *
*                                                                     *
* DESCRIPTIVE NAME = Dynamically set UNIT=AFF for input tape files    *
*                                                                     *
* FUNCTION = This program was originally designed to reduce the       *
*            number of tape drives used by user-submitted SAS jobs.   *
*            It scans the SWA of the next step and changes some of    *
*            the SIOT pointers to force all input tape data sets to   *
*            use the same drive.                                      *
*                                                                     *
* STATUS = R202                                                       *
*                                                                     *
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  *
*                                                                     *
* DEPENDENCIES = OS/VS2                                               *
*                                                                     *
* AUTHORIZATION = APF                                                 *
*                                                                     *
* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER XF                                  *
*                                                                     *
*    MODULE SIZE = 3K                                                 *
*                                                                     *
*    ATTRIBUTES = NOREUS, PROBLEM STATE, KEY ZERO                     *
*                                                                     *
* OPERATION = UNITAFF must be executed immediately before the step    *
*             to process (SAS, SORT, or any other program that reads  *
*             a variable number of tape files, one at a time).        *
*                                                                     *
*             Sample JCL:                                             *
*                                                                     *
*               //UNITAFF EXEC PGM=UNITAFF                            *
*               //STEPLIB  DD DSN=SYS2.AUTHLIB,DISP=SHR               *
*               //*                                                   *
*               //STEP53  EXEC PGM=SAS                                *
*               //OSIN     DD DSN=USER1.X,DISP=SHR                    *
*               //         DD DSN=UPQE.DQE40530(-1),DISP=SHR          *
*               //OSIN2    DD DSN=UPQR.DQR02150(0),DISP=SHR           *
*               //OSIN3    DD DSN=USER1.X,DISP=SHR                    *
*               //         DD DSN=UPBG.DBGA0240(-1),DISP=SHR          *
*               //OSIN4    DD DSN=USER1.X,DISP=SHR                    *
*               //         DD DSN=USER1.YY,DISP=SHR                   *
*               //         DD DSN=UPQR.DQR02140(-1),DISP=SHR          *
*                                                                     *
*             This program only supports cataloged data sets;         *
*             relative generation numbers are handled                 *
*             correctly via the GDGNT.                                *
*                                                                     *
*             No distinction is made between 3420 and 3480 types,     *
*             which will cause incorrect results if the input to      *
*             a step is mixed.                                        *
*                                                                     *
*Changes:                                                             *
*$101 Fix SWA=BELOW bug                                               *
*$202 OS/VS2                                                          *
***********************************************************************
         LCLC  &STR
UNITAFF  CSECT
         SAVE  (14,12),,'GSF UTILITIES - UNITAFF R202'
         LR    R12,R15                 base reg
         USING UNITAFF,R12
         LA    R0,DYNL
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)              CHAIN SAVE AREA
         LR    R13,R1                  DYN ADDRESS
         USING DYN,R13
         LA    R0,DYN+72               CLEAR WORKING STORAGE TO X'00'
         LA    R1,DYNL-72              CLEAR WORKING STORAGE TO X'00'
         SLR   R15,R15                 CLEAR WORKING STORAGE TO X'00'
         MVCL  R0,R14                  CLEAR WORKING STORAGE TO X'00'
***********************************************************************
*                                                                     *
*        LOCATE TCB, JSCB, GDGNT.                                     *
*        LOCATE SCT AND 1ST SIOT FOR NEXT STEP.                       *
*                                                                     *
***********************************************************************
         L     R1,540(,0)              PSATOLD
         L     R3,TCBJSCB-TCB(,R1)     GET THE ADDRESS OF MY JSCB
         USING IEZJSCB,R3
         L     R4,JSCBJCT              Address of JCT prefix
         USING INJMJCT-16,R4
         ICM   R1,B'0111',JCTGDGNT     3-BYTE SVA OF GDG NAME TABLE
         BZ    NOGDGNT                 JUMP IF THERE IS NO GDGN TABLE
         LA    R1,16(,R1)              CONVERT SVA TO 31-BIT ADDRESS
         ST    R1,GDGNTPTR             KEEP ADDRESS OF GDG NAMES TABLE
*
NOGDGNT  ICM   R1,B'0111',JSCSCTP      3-BYTE SVA OF CURRENT STEP'S SCT
         LA    R5,16(,R1)              CURRENT STEP'S SCT ADDRESS
         USING SCT,R5
*
NEXTSTEP ICM   R1,B'0111',SCTANSCT     LOAD 3-BYTE SVA OF NEXT SCT
         BZ    RETURN                  RETURN IF THERE IS NO NEXT STEP
         LA    R5,16(,R1)              ADDRESS OF NEXT STEP'S SCT
         ICM   R1,B'0111',SCTFSIOT     LOAD 3-BYTE SVA OF 1ST SIOT
         BZ    RETURN                  NO DD CARDS, RETURN
***********************************************************************
*                                                                     *
*        LOOP THRU THE SIOT BLOCKS                                    *
*                                                                     *
***********************************************************************
LOOPSIOT LA    R6,16(,R1)              ADDRESS OF SIOT
         USING SIOT,R6
         AP    SEQ#,=P'1'              INCREMENT CURRENT SEQ#
         TM    SCTSBYT1,SIOTCCAT       CHECK FOR CONCATENATION
         BO    TESTDISP                JUMP IF NO DDNAME
         MVC   DDNAME,SCTDDNAM         KEEP DDNAME
         SP    SEQ#,SEQ#               RESET DDSEQ
TESTDISP OI    SEQ#+L'SEQ#-1,X'0F'     SUPPRESS SIGN
         TM    SCTSBYT3,1              CHECK DISP=OLD
         BNO   NEXTSIOT                JUMP IF NOT DISP=OLD
         CLI   SCTUTYPE,C' '           CHECK UNIT NAME
         BH    NEXTSIOT                JUMP IF THERE IS A UNIT NAME
         TM    SCTSBYT1,SCTUNAFF       TEST UNIT=AFF BIT
         BO    NEXTSIOT                JUMP IF UNIT=AFF ALREADY THERE
         ICM   R1,B'0111',SCTPJFCB     LOAD 3-BYTE SVA OF JFCB
         LA    R7,16(,R1)              ADDRESS OF JFCB
         USING JFCB,R7                 DSNAME FROM JFCB
         MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE
         TM    JFCBIND1,JFCGDG         CHECK GDG INDICATOR
         BNO   LOCATE                  JUMP IF NOT GDG
*--------------------------------------------------------------------*
*        IF THE CURRENT DATA SET IS A GDG, SCAN THE GDG NAMES TABLE
*        FOR THE CURRENT APPARENT GEN (0), IF ANY.
*--------------------------------------------------------------------*
GDG000   ICM   R1,B'1111',GDGNTPTR     LOAD ADDR OF GDG NAMES TABLE
         BZ    GDG100                  JUMP IF NO GDGNT
         USING GDGNTABL,R1
GDG010   SLR   R14,R14                 PREPARE IC
         IC    R14,GDGNNO              GET NUMBER OF ENTRIES
GDG015   CLC   GDGNGDG,DSNAME          COMPARE TABLE ENTRY W/ DSNAME
         BNE   GDG030                  JUMP IF NOT THE SAME
         LA    R0,GDGNGDGZ             GET PTR TO APPARENT GEN(0)
         ST    R0,CTGWAGB              SET POINTER IN SVC 26 WORK AREA
         OI    CTGOPTN3,CTGGDGL        SHOW CTGWAGB IS SET
         B     GDG100                  EXIT GDGNT SCAN LOOP
GDG030   LA    R1,GDGNGDG2             BUMP UP TO NEXT ENTRY IN BLOCK
         BCT   R14,GDG015              LOOP UNTIL END OF BLOCK
         ICM   R1,B'1111',GDGNNEXT     LOAD ADDR OF NEXT GDGNT BLOCK
         BNZ   GDG010                  PROCESS NEXT BLOCK
         NI    CTGOPTN3,255-CTGGDGL    SHOW CTGWAGB IS SET
         DROP  R1                      GDGNTABL
GDG100   LA    R1,DSNAME               1ST BYTE OF DSNAME
GDG120   LA    R1,1(,R1)               BUMP UP TO NEXT BYTE
         CLI   0(R1),C' '              CHECK FOR A SPACE
         BNE   GDG120                  LOOP UNTIL END OF DSNAME
         MVI   0(R1),C'('              DSNAME(
         MVC   1(4,R1),JFCBELNM        DSNAME(0
GDG125   LA    R1,1(,R1)               BUMP UP TO NEXT BYTE
         CLI   0(R1),C' '              CHECK FOR A SPACE
         BNE   GDG125                  LOOP UNTIL END OF GEN. NO.
         MVI   0(R1),C')'              DSNAME(0)
*--------------------------------------------------------------------*
*        GET DEVICE TYPE INFORMATION FROM THE CATALOG.
*        KEEP RELATIVE DD# IF IT IS THE FIRST TAPE DD IN THE STEP.
*--------------------------------------------------------------------*
LOCATE   LA    R0,DSNAME               DATA SET NAME
         ST    R0,CTGENT               ENTRY ADDRESS
         OI    CTGOPTN1,CTGNAME        CTGENT POINTS TO ENTRY NAME
         LA    R0,CTGWA                WORK AREA FOR SUPERLOCATE
         ST    R0,CTGWKA               WORK AREA FOR SUPERLOCATE
         OI    CTGOPTN3,CTGSUPLT       SUPER LOCATE
         OI    CTGOPTN3,CTGAM0         OS/VS2 CATALOG MGMT REQUEST
         LA    R0,CTGVL                GET ADDR OF VOLUME LIST
         ST    R0,CTGWAVL              UPDATE PTR
         LA    R0,CTGVLLEN             GET LENGTH OF VOLUME LIST
         STH   R0,CTGWALV              UPDATE LENGTH
         LOCATE CTGPL                  ISSUE SUPERLOCATE
         LTR   R15,R15
         BNZ   NEXTSIOT                JUMP IF DATA SET NOT CATALOGED
         CLI   CTGVLDEV+2,X'80'        CHECK DEVICE CLASS
         BNE   NEXTSIOT                JUMP IF NOT A TAPE
         OC    TAPE1,TAPE1             CHECK 1ST TIME
         BNZ   NOTFIRST                JUMP IF NOT 1ST TIME
         MVC   TAPE1,SCTDDINO          KEEP DD# FOR 1ST TAPE DD
         MVC   DDNAME1,DDNAME          KEEP DDNAME
         UNPK  DDSEQ1,SEQ#             KEEP DDSEQ
         B     NEXTSIOT                JUMP IF 1ST TAPE DD
*--------------------------------------------------------------------*
*        UPDATE THE SIOT IF THIS IS NOT THE FIRST TAPE IN THE STEP.
*--------------------------------------------------------------------*
NOTFIRST MODESET KEY=ZERO
         MVC   SCTUSADD,TAPE1          MOVE DD# OF 1ST TAPE DD
         OI    SCTSBYT1,SCTUNAFF       SET UNIT=AFF BIT
         MODESET KEY=NZERO
         UNPK  DDSEQ,SEQ#              MOVE DDSEQ
         WTO   MF=(E,WTO1L)            NOTIFY PROGRAMMER
*--------------------------------------------------------------------*
*        LOCATE NEXT SIOT BLOCK, CHECK FOR LAST ONE.
*--------------------------------------------------------------------*
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     SVA OF NEXT SIOT
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP
         DROP  R5,R6,R7                SCT, SIOT, JFCB
***********************************************************************
*                                                                     *
*        CLEAN-UP, RETURN TO CALLER.                                  *
*                                                                     *
***********************************************************************
RETURN   LA    R0,DYNL
         LR    R1,R13                  DYN ADDRESS
         L     R13,4(,R13)             CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)      FREE DYNAMIC STORAGE
         RETURN (14,12),RC=0
***********************************************************************
*        CONTROL BLOCKS FOR LOCATE & WTO.                             *
***********************************************************************
&STR     SETC  (126)' '
WTO1L    WTO   '&STR',MF=L,ROUTCDE=14
         ORG   WTO1L+4
         DC    C'UNITAFF: '
DDNAME   DC    CL8' ',C' +'            DDNAME FOR CURRENT TAPE DD
DDSEQ    DS    C'000'                  DD SEQ# FOR CURRENT TAPE DD
         DC    C' USES SAME UNIT AS '  DDNAME FOR 1ST TAPE DD
DDNAME1  DC    CL8' ',C' +'            DDNAME FOR 1ST TAPE DD
DDSEQ1   DC    C'000'                  DD SEQ# FOR 1ST TAPE DD
         ORG   ,
SEQ#     DC    P'000'                  SEQ#
*---------------------------------------------------------------------
*        DYNAMIC STORAGE AREA, BASED BY R13.
*---------------------------------------------------------------------
DYN      DSECT
         DS    18F
GDGNTPTR DS    F                       POINTER TO GDG NAMES TABLE
TAPE1    DS    XL2                     INTERNAL DD# FOR 1ST TAPE DD
DSNAME   DS    CL44                    MODIFIABLE DSNAME
*---------------------------------------------------------------------*
*        CATALOG PARAMETER LIST
*---------------------------------------------------------------------*
CTGPL    DS    0D
CTGOPTN1 DS    B              FIRST OPTION BYTE:
CTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR
CTGOPTN2 DS    B              SECOND OPTION BYTE
CTGOPTN3 DS    B     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION
CTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION
CTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL
CTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST
CTGOPTN4 DS    B              FOURTH OPTION BYTE
CTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)
CTGENT   DS    A              ADDRESS OF CATALOG RECORD IDENTIFIER
CTGCAT   DS    A              ADDRESS OF CATALOG DSNAME OR ACB
CTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA
CTGOPTNS DS    B              CATALOG MANAGMENT SERVICES REQUEST OPTION
         DS    B              RESERVED
CTGTYPE  DS    C              TYPE OF CATALOG RECORD
CTGNOFLD DS    FL1            NUMBER OF ENTRIES IN CTGFIELD
CTGFDBK  DS    XL2            FEEDBACK AREA (IF NOT SUPERLOCATE)
CTGFBFLG DS    B              FLAGS (SUPERLOCATE)
CTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT
CTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP
CTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED
CTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)
         DS    B              RESERVED (SUPERLOCATE)
CTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD
*---------------------------------------------------------------------*
*        CATALOG WORK AREA
*---------------------------------------------------------------------*
CTGWA    DS    0D
CTGWAVL  DS    A                       PTR TO CTGVL (VOLUME LIST)
CTGWALV  DS    H                       LENGTH OF THE VOLUME LIST
CTGWAVCT DS    H                       # OF VOLSERS RETURNED IN VL
CTGWAUCT DS    H                       MINIMUM # OF VOLS TO BE MOUNTED
CTGWAGCT DS    H                       # OF GENERATIONS CATALOGED
CTGWAGB  DS    A                       PTR TO APPARENT GEN(0)
*---------------------------------------------------------------------*
*        CATALOG VOLUME LIST
*---------------------------------------------------------------------*
CTGVL    DS    0D
CTGVLVOL DS    CL6                     VOLUME SERIAL
CTGVLDEV DS    XL4                     DEVICE TYPE
CTGVLSEQ DS    H                       FILE SEQ#
CTGVLX   DS    19XL12                  VOLUME LIST EXTENSION
CTGVLLEN EQU   *-CTGVL                 LENGTH OF VOLUME LIST
DYNL     EQU   *-DYN
*---------------------------------------------------------------------
*        GDG NAMES TABLE MAPPING (USING IEFZB902 AS A MODEL)
*---------------------------------------------------------------------
**       SYS1.AMODGEN(IEFZB429)
GDGNTABL DSECT
GDGNQSVA DS    XL3                     SVA OF NEXT GDGNT RECORD
GDGNTID  DS    X'23'                   GDGNT ID X'23'
GDGNNEXT DS    A                       IN-CORE ADDRESS OF NEXT RECORD
GDGNGDG  DS    CL35                    GDG BASE
GDGNGDGZ DS    C'1234'                 APPARENT (0) GENERATION
GDGNGDG2 DS    CL35,C'1234'            2ND GDG NAME
         DS    CL35,C'1234'            3RD GDG NAME
         DS    CL35,C'1234'            4TH GDG NAME
GDGNNO   DS    FL1                     NUMBER OF ENTRIES
         DS    XL15                    FILLER
GDGNLEN  EQU   GDGNTABL+176
*---------------------------------------------------------------------
*        MAPPING MACROS FROM SYS1.AMODGEN
*---------------------------------------------------------------------
         IKJTCB LIST=YES               TASK CONTROL BLOCK
         IEZJSCB ,                     JOB STEP CONTROL BLOCK
JCT      DSECT
         IEFAJCTB ,                    JOB CONTROL BLOCK
SCT      DSECT
         IEFASCTB ,                    STEP CONTROL BLOCK
SIOT     DSECT
         IEFASIOT ,                    STEP I/O TABLE
JFCB     DSECT
         IEFJFCBN LIST=YES             JOB FILE CONTROL BLOCK
         CVT   DSECT=YES               COMMUNICATION VECTOR TABLE
*        YREGS                         REGISTER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//SYSLIB   DD DSN=SYS1.AMODGEN,DISP=SHR
//         DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120
//SYSPRINT DD SYSOUT=*
//*
//LKED    EXEC PGM=HEWL,PARM='MAP,AC=1'
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)
//SYSLMOD  DD DSN=GILBERT.LOAD(UNITAFF),DISP=SHR
//*
//UNITAFF EXEC PGM=UNITAFF
//STEPLIB  DD DSN=GILBERT.LOAD,DISP=SHR
//SYSUDUMP DD SYSOUT=*
//OSIN     DD DSN=GILBERT.UNITAFF1,DISP=SHR
//*
//STEP53  EXEC PGM=IEFBR14
//OSIN     DD DSN=GILBERT.UNITAFF1,DISP=SHR
//         DD DSN=GILBERT.UNITAFF2,DISP=SHR
