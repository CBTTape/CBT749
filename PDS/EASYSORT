//GILBERTE JOB (ACCT#),EASYSORT,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=X,COND=(0,NE)
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)
         MACRO
&REF     EASYSORT &FUNC,&WORKA,&EODAD=,&SET=(R1),                      X
               &TYPE=F,&LENGTH=80,&FIELDS=(1,80,CH,A)
.**********************************************************************
.*                                                                    *
.*   USAGE:                                                           *
.*                                                                    *
.*       SORT  OPEN,TYPE=F,LENGTH=64,FIELDS=(1,22,CH,A)               *
.*       SORT  PUT,(1)                                                *
.*       SORT  GET,SET=(R3),EODAD=ENDSORT                             *
.*                                                                    *
.**********************************************************************
         GBLB  &EASYSRT
         LCLC  &LABEL,&LQ
&LABEL   SETC  'IHB&SYSNDX'
         AIF   ('&FUNC' EQ 'OPEN').OPEN
         AIF   ('&FUNC' EQ 'PUT').PUT
         AIF   ('&FUNC' EQ 'GET').GET
         MNOTE 8,'INVALID FUNCTION REQUESTED &FUNC'
&REF     DS    0H
         MEXIT
.OPEN    ANOP  ,  ====== OPEN ========
&REF     L     R15,=A(SORT$OPN)        .
         LA    R1,=A(&LABEL.P+X'80000000') PARM LIST ADDRESS
         BALR  R14,R15                 OPEN SORT
SORT$XXX CSECT
.**********************************************************************
         AIF   (&EASYSRT).NOOPN        JUMP IF NOT FIRST OPEN
&EASYSRT SETB  1
SORT$OPN STM   R14,R12,12(R13)         SAVE REGISTERS
         USING SORT$OPN,R15
         ST    R13,SORT$SAV+4          BACKWARD CHAIN
         LA    R13,SORT$SAV            SORT SAVE AREA
         MVI   0(R13),C'0'             PHASE 0 ENTERED
*        LINK  SF=(E,SORT$LNK)         LINK EP=SORT,SF=L
         LINK  SF=(E,SORT$LNK)         LINK EP=SORT,SF=L
         L     R13,4(,R13)             RELOAD PROGRAM'S SAVE AREA ADDR.
         LM    R14,R12,12(R13)         RESTORE REGISTERS (GET)
         SLR   R1,R1                   INVALIDATE RECORD POINTER
         BR    R14                     GOBACK TO PROGRAM (GET)
SORT$E15 STM   R14,R12,12(R13)         SAVE REGISTERS FROM SORT
         USING SORT$E15,R15
.*       ST    R13,SORT$SAV+8          ESTABLISH CHAIN FOR PUT
         L     R13,SORT$SAV+4          PROGRAM'S SAVE AREA
         MVI   SORT$SAV,C'1'           PHASE 1 STARTED
         LM    R14,R12,12(R13)         RESTORE PROGRAM'S REGISTERS
         BR    R14                     GOBACK TO PROGRAM (PUT)
SORT$PUT STM   R14,R12,12(R13)         SAVE PROGRAM'S REGISTERS
         USING SORT$OPN,R15
         L     R13,SORT$SAV+8          SAVE AREA FOR E15
         LM    R14,R0,12(R13)          RESTORE SORT R14-R0
         LA    R15,0012(0)             INSERT RECORD REQUEST
         LM    R2,R12,28(R13)          RESTORE SORT R2-R12
         BR    R14                     GOBACK TO SORT (E15)
SORT$E35 STM   R14,R12,12(R13)         SAVE REGISTERS FROM SORT
         USING SORT$E35,R15
         ICM   R1,B'1111',0(R1)        ADDR OF SORTED RECORD
         BZ    SORT$E36                NO MORE RECORDS, TERMINATE E35
.*       ST    R13,SORT$SAV+8          ESTABLISH CHAIN FOR GET
         L     R13,SORT$SAV+4          PROGRAM'S SAVE AREA
         LM    R14,R0,12(R13)          RESTORE PROGRAM'S R14-R0
         LM    R2,R12,28(R13)          RESTORE PROGRAM'S R2-R12
         BR    R14                     GOBACK TO PROGRAM, PASS R1
SORT$E36 LA    R15,0008(0)             "QUIT" RETURN CODE
         BR    R14                     GOBACK TO SORT, TERMINATE E35
SORT$GET STM   R14,R12,12(R13)         SAVE PROGRAM'S REGISTERS
         USING SORT$OPN,R15
         L     R13,SORT$SAV+8          SAVE AREA FOR E15/E35
         CLI   SORT$SAV,C'3'           CHECK PHASE 3 ENTERED
         BE    &LABEL.3                JUMP IF E35 STARTED ALREADY
         MVI   SORT$SAV,C'3'           SHOW PHASE 3 ENTERED
         LM    R14,R12,12(R13)         RESTORE SORT REGISTERS
         LA    R15,0008(0)             END OF E15 REQUEST
         BR    R14                     GOBACK TO SORT (E15)
&LABEL.3 LM    R14,R12,12(R13)         RESTORE REGISTERS
         LA    R15,0004(0)             DELETE RECORD
         BR    R14                     GOBACK TO SORT (E35)
         DROP  R15
SORT$LNK LINK  EP=SORT,SF=L            PARAMETER LIST FOR LINK SVC
SORT$SAV DS    18F                     SAVE AREA FOR SORT
.NOOPN   CNOP  2,4
&LQ      SETC  'L'''
&LABEL.P DC    Y(&LABEL.S-(*+2))       LENGTH OF PARM LIST
         DC    A(&LABEL.S,&LABEL.S+&LQ&LABEL.S-1)
         DC    A(&LABEL.R,&LABEL.R+&LQ&LABEL.R-1)
         DC    A(SORT$E15,SORT$E35)
&LABEL.S DC    C' SORT FIELDS=&FIELDS,DYNALLOC=3380 '
&LABEL.R DC    C' RECORD TYPE=&TYPE,LENGTH=&LENGTH ',0H'0'
&SYSECT  CSECT
         MEXIT
.**********************************************************************
.*       PUT
.**********************************************************************
.PUT     AIF   ('&WORKA'(1,1) EQ '(').PUTREG
&REF     LA    R1,&WORKA               GET RECORD ADDRESS
         AGO   .PUTCOMM
.PUTREG  AIF   ('&WORKA' EQ '(1)' OR '&WORKA' EQ '(R1)').PUTREG1
&REF     LR    R1,&WORKA(1)            GET RECORD ADDRESS
         AGO   .PUTCOMM
.PUTREG1 ANOP
&REF     L     R15,=A(SORT$OPN)        POINT TO SORT CSECT
         AGO   .PUTBALR
.PUTCOMM L     R15,=A(SORT$OPN)        POINT TO SORT CSECT
.PUTBALR BAL   R14,SORT$PUT-SORT$OPN(,R15) CALL PUT ROUTINE
         MEXIT
.**********************************************************************
.*       GET
.**********************************************************************
.GET     ANOP
&REF     L     R15,=A(SORT$OPN)        POINT TO SORT CSECT
         BAL   R14,SORT$GET-SORT$OPN(,R15) CALL GET ROUTINE
         LTR   &SET(1),R1              CHECK RECORD ADDRESS
         BZ    &EODAD                  END OF DATA
.MEND    MEND
***********************************************************************
*
*        TEST PROGRAM
*
***********************************************************************
         EJECT
EASYSORT CSECT
         SAVE  (14,12),,TEST-EASYSORT-&SYSDATE
         BALR  R12,0                   BASE REGISTER
         USING *,R12
         ST    R13,SAVEAREA+4          CALLER'S SAVE AREA
         LA    R13,SAVEAREA            MY OWN SAVE AREA
***********************************************************************
         OPEN  SYSIN
         EASYSORT OPEN,TYPE=F,LENGTH=32,FIELDS=(1,12,CH,A)
GET1     GET   SYSIN                   GET A SYSIN RECORD
         EASYSORT PUT,(R1)             PASS RECORD TO THE SORT (E15)
         B     GET1                    GET NEXT RECORD
EOD1     CLOSE SYSIN                   CLOSE INPUT FILE
         FREEPOOL SYSIN                FREE BUFFERS
***********************************************************************
         OPEN  (SYSPRINT,EXTEND)
PUT2     EASYSORT GET,SET=R0,EODAD=EOD2 GET SORTED RECORD (E35)
         PUT   SYSPRINT,(0)            PRINT RECORD
         B     PUT2                    LOOP UNTIL LAST RECORD RETURNED
EOD2     CLOSE SYSPRINT                CLOSE OUTPUT FILE
         FREEPOOL SYSPRINT             FREE BUFFERS
         L     R13,4(,R13)             CALLER'S SAVE AREA
         RETURN (14,12),RC=00
***********************************************************************
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,EODAD=EOD1
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FB,LRECL=32
SAVEAREA DS    9D
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120
//SYSPRINT DD SYSOUT=*
//*
//GO      EXEC PGM=LOADER,PARM=NOPRINT
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)
//SORTWK01 DD UNIT=3380,SPACE=(CYL,1)
//SYSOUT   DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
555555555
444444444444
333333333333
